<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Database Refactoring | Fabrízio de Royes Mello]]></title>
  <link href="http://fabriziomello.github.io/blog/categories/database-refactoring/atom.xml" rel="self"/>
  <link href="http://fabriziomello.github.io/"/>
  <updated>2014-04-27T01:45:56-03:00</updated>
  <id>http://fabriziomello.github.io/</id>
  <author>
    <name><![CDATA[Fabrízio de Royes Mello]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Database Refactoring]]></title>
    <link href="http://fabriziomello.github.io/blog/2013/06/10/database-refactoring/"/>
    <updated>2013-06-10T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2013/06/10/database-refactoring</id>
    <content type="html"><![CDATA[<div class='post'>
<h4><b>Contextualização</b></h4>Refatoração&nbsp;de código&nbsp;(<i><a href="https://en.wikipedia.org/wiki/Code_refactoring">Code Refactoring</a></i>) é uma disciplina/processo que consiste em melhorar a estrutura interna de um software sem modificar seu comportamento externo, e uma Refatoração de Banco de Dados (<i><a href="https://en.wikipedia.org/wiki/Database_refactoring">Database Refactoring</a></i>) parte do mesmo princípio, porém além de manter o comportamento externo também deve manter a semântica da informação que ele mantém/armazena, e por esse motivo é considerada mais difícil.<br /><br />Um outro conceito que posso destacar a respeito de <i>Database Refactoring</i> é:<br /><i>"Mudança disciplinada na estrutura de uma base de dados que não altera sua semântica, porém melhora seu projeto e minimiza a introdução de dados inconsistentes"</i><br /><br />O ponto interessante deste último é o texto "<i>minimiza a introdução de dados inconsistentes</i>", pois esse é o grande objetivo de realizarmos um <i>refactoring</i> na estrutura de um banco de dados, ou seja, melhorar o <i>desing</i>&nbsp;atual para melhorar a consistência dos dados e também a qualidade dos novos dados que serão adicionados ao seu banco de dados.<br /><br />E esta tarefa não é das mais simples, pois existe um fator preponderante no que diz respeito a dificuldade de execução deste tipo de <i>refactoring</i> que é o acoplamento, que será visto logo a seguir.<br /><h4><b>Acoplamento</b></h4><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; text-align: center;"><tbody><tr><td style="text-align: center;"><span style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><a href="http://www.agiledata.org/essays/databaseRefactoring.html#Figure1BestCaseScenario"><img border="0" height="200" src="http://3.bp.blogspot.com/--JcWNVQiwEw/UbVRwiLB_pI/AAAAAAAAAag/DKCZt5EndPI/s200/dataRefactoringBestCase.gif" width="175" /></a></span></td></tr><tr><td class="tr-caption" style="text-align: center;"><a href="http://www.agiledata.org/essays/databaseRefactoring.html#Figure1BestCaseScenario">Figura 1. Baixo Acoplamento</a></td></tr></tbody></table>É a medida de dependência entre dois elementos. Quanto mais acoplados dois elementos estiverem, maior a chance que a mudança em um implique na mudança em outro.<br /><br /><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; text-align: left;"><tbody><tr><td style="text-align: center;"><span style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><a href="http://www.agiledata.org/essays/databaseRefactoring.html#Figure2WorstCaseScenario"><img border="0" height="171" src="http://4.bp.blogspot.com/-G1MJ8-P0mPw/UbVRyTd6jFI/AAAAAAAAAas/LqwBNfBbVvc/s200/dataRefactoringWorstCase.gif" width="200" /></a></span></td></tr><tr><td class="tr-caption" style="text-align: center;"><a href="http://www.agiledata.org/essays/databaseRefactoring.html#Figure2WorstCaseScenario">Figura 2. Alto Acoplamento</a></td></tr></tbody></table>Simples assim, quanto mais o seu banco de dados estiver acoplado, ou seja, dependente de diversas aplicações externas, mais difícil será a aplicação de um <i>refactoring</i>.<br /><br />A Figura 1 demonstra um cenário "<i>Single-Database Application</i>" que é bem simplificado, onde a aplicação de um <i>refactoring</i>&nbsp;será mais tranquilo.<br /><br />Com certeza o cenário da Figura 2, o "<i>Multi-Database Application</i>"&nbsp;é o pior caso, pois exige muito cuidado e planejamento para execução do <i>refactoring</i>, então veremos a seguir uma sugestão de processo para execução.<br /><br /><h4><b>Processo de Refatoração</b></h4><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="clear: right; float: right; margin-bottom: 1em; text-align: right;"><tbody><tr><td style="text-align: center;"><span style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><a href="http://www.agiledata.org/essays/databaseRefactoring.html#Figure3Process"><img border="0" height="320" src="http://2.bp.blogspot.com/-GuIfZIWdI9M/UbVNf7VP42I/AAAAAAAAAaQ/IuYaQ9S4wPk/s320/databaseRefactoringProcess.gif" width="252" /></a></span></td></tr><tr><td class="tr-caption" style="text-align: center;">Figura 3. Processo de&nbsp;<i>Database Refactoring</i></td></tr></tbody></table>Um processo é um conjunto organizado de atividades com um objetivo em comum. Executar um&nbsp;<i>database refactoring</i>&nbsp;em um cenário "<i>Single-Database Application</i>" ou "<i>Multi-Application Database</i>" requer um processo, por mais simples que seja. A grande diferença na execução em ambos cenários é que no caso do "<i>Multi-Application Database</i>" o período de transição (mais abaixo falaremos) geralmente será mais longo.<br /><br />É bom sempre ter em mente que um <i>database refactoring</i>, como já vimos,&nbsp;não é uma atividade simples então caso seja identificada a real necessidade de refatorar um banco de dados então podemos usar o seguinte roteiro (processo) para se guiar:<br /><ul><li>Escolher o <i>refactoring</i> mais apropriado;</li><li>Depreciar o esquema original;</li><li>Testar antes, durante e após;</li><li>Modificar esquema;</li><li>Migrar os dados;</li><li>Modificar código externo;</li><li>Executar testes de regressão;</li><li>Versionar seu trabalho;</li><li>Anunciar o refactoring.</li></ul><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-jEsZQM4gxVU/UbVWvbD4CsI/AAAAAAAAAa8/7VDnxsuE6E0/s1600/process-refactoring-regra-geral.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="88" src="http://1.bp.blogspot.com/-jEsZQM4gxVU/UbVWvbD4CsI/AAAAAAAAAa8/7VDnxsuE6E0/s320/process-refactoring-regra-geral.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Figura 4. Regra Geral Processo Refatoração</td></tr></tbody></table><br />Na Figura 4 é demonstrado um pequeno processo descrevendo um fluxo básico para aplicação de um <i>refactoring</i>.<br /><br />Atente bem para o "Período de Transição", que é a fase mais importante, principalmente para cenários "<i>Multi-Database Application</i>" (Figura 2), onde você precisa ter em mente que não conseguirá realizar o <i>refactoring</i>&nbsp;e fazer o <i>deploy</i> em produção de todas as aplicações ao mesmo tempo. Na verdade você nem conseguirá alterar todas as aplicações ao mesmo tempo, principalmente se você tiver dependência de terceiros, então você precisará suportar o esquema original e o esquema resultante ao mesmo tempo, para somente quando todas aplicações estiverem suportando apenas o esquema resultante, ou novo esquema, você poderá aposentar de vez o antigo esquema e assim finalizar este período.<br /><br /><h4><b>Estratégias de <i>Database Refactorings</i></b></h4>Existem alguns pontos a considerar com estratégias para adoção de um <i>database refactoring</i>:<br /><br /><ul><li>Pequenas mudanças são mais fáceis de aplicar;</li><li>Identifique unicamente cada <i>refactoring</i>;</li><li>Implemente uma grande mudança realizando várias pequenas mudanças;</li><li>Tenha uma tabela de configuração/versionamento do seu banco de dados;</li><li>Priorize <i>triggers</i>&nbsp;ao invés de <i>views</i>&nbsp;ou sincronizações em lote;</li><li>Escolha um período de transição suficiente para realizar as mudanças;</li><li>Simplifique sua estratégia de controle de versão de banco de dados;</li><li>Simplifique negociações com outros times;</li><li>Encapsule acesso ao banco de dados;</li><li>Habilite-se a montar facilmente um ambiente de banco de dados;</li><li>Não duplique SQL;</li><li>Coloque os ativos de banco de dados sobre controle de mudanças;</li><li>Seja cuidadoso com políticas.</li></ul><div>Os items acima mostram apenas algumas sugestões, em forma de "lições aprendidas", de algumas estratégias que você pode considerar quando tiver a necessidade de realizar um <i>refactoring</i>.</div><div>Para apoiar essas estratégias existe um catálogo que descrevem diversos tipos de <i>refactorings</i>&nbsp;em bancos de dados&nbsp;e exemplos de uso, que veremos a seguir.</div><div><br /></div><h4><b><a href="http://www.agiledata.org/essays/databaseRefactoringCatalog.html">Catálogo de&nbsp;<i>Database Refactorings</i></a></b></h4><div>Este catálogo é dividido em algumas categorias:<br /><br /><ul><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogStructural.html">Structural</a></i>: são mudanças na estrutura do banco de dados (tabelas, colunas, visões, etc).</li><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogDataQuality.html">Data Quality</a></i>: são mudanças que melhoram a qualidade das informações contidas em um banco de dados.</li><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogReferentialIntegrity.html">Referential Integrity</a></i>: são mudanças que asseguram que uma linha referenciada exista em outra relação e/ou assegura que uma linha que não é mais necessária seja removida apropriadamente.</li><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogArchitectural.html">Architectural</a></i>: são mudanças que melhoram a maneira que programas externos interagem com a base de dados.</li><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogMethod.html">Method</a></i>: são mudanças que melhoram a qualidade de uma Procedure um Função.</li><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogTransformations.html">Transformations</a></i>: mudanças que alteram a semântica do esquema do banco pela adição de novas funcionalidades.</li></ul><br /><div>No meu <a href="https://github.com/fabriziomello/database_refactoring">github</a> é possível encontrar exemplos práticos de aplicação passo-a-passo de um refactoring em um <a href="https://github.com/fabriziomello/database_refactoring/blob/master/model/01_modelo_inicial.png">modelo inicial</a>, passando por um <a href="https://github.com/fabriziomello/database_refactoring/blob/master/model/02_modelo_fks.png">período de transição</a> e chegando ao <a href="https://github.com/fabriziomello/database_refactoring/blob/master/model/03_modelo_city.png">modelo final</a>.&nbsp;</div><div><br /></div><div><h4>Considerações Finais</h4>Devemos levar em consideração que apesar destas técnicas serem direcionadas para refatoração, ou seja, mudar estrutura sem mudar sua semântica, as mesmas podem e devem ser utilizadas para evolução da sua aplicação, ou seja, se você precisa construir uma nova <i>feature</i>&nbsp;em sua aplicação que está em produção, você poderá recorrer das práticas aqui apresentadas para evoluir seu esquema de forma mais consistente e segura.<br /><br />Baseado no exposto podemos facilmente responder a pergunta "Por quê Refatorar?":<br /><br /><ul><li>aceitar mudança de escopo;</li><li>fornecer feedback rápido;</li><li>melhoria contínua;</li><li>aumentar simplicidade para facilitar entendimento;</li><li>tornar os modelos mais próximos do mundo real;</li><li>termos modelos simples para facilitar:</li><ul><li>manutenção e</li><li>evolução da aplicação</li></ul></ul>E para refatorarmos precisamos ter conhecimento, disciplina, simplicidade, bom senso e persistência, sem contar no ponto fundamental que é organização.<br /><br /><h4>Referências</h4><ul><li>Livros:&nbsp;</li><ul><li><a href="http://www.ambysoft.com/books/refactoringDatabases.html">Refactoring Databases</a> (Scott W. Ambler e Pramod J. Sadalage)</li><li><a href="http://www.ambysoft.com/books/agileDatabaseTechniques.html">Agile Database Techniques</a> (Scott W. Ambler)</li><li><a href="http://martinfowler.com/books/refactoring.html">Refactoring</a> (Martin Fowler)</li><li><a href="http://www.ambysoft.com/books/agileModeling.html">Agile Modeling</a> (Scott W. Ambler)&nbsp;</li></ul><li>Links:</li><ul><li><a href="http://www.agiledata.org/">http://www.agiledata.org</a></li><li><a href="http://www.databaserefactoring.org/">http://www.databaserefactoring.org</a></li><li><a href="http://visaoagil.wordpress.com/">http://visaoagil.wordpress.com</a></li><li><a href="http://www.refactoring.com/">http://www.refactoring.com</a></li><li><a href="http://www.postgresql.org/">http://www.postgresql.org</a></li><li><a href="http://www.epictest.org/">http://www.epictest.org</a></li><li><a href="http://www.slideshare.net/diogobiazus/testes-unitarios-com-postgre-sql">http://www.slideshare.net/diogobiazus/testes-unitarios-com-postgre-sql</a></li></ul><li>Slides</li><ul><li><a href="http://www.slideshare.net/fabriziomello/tag/refactoring">http://www.slideshare.net/fabriziomello/tag/refactoring</a></li><li><a href="http://www.slideshare.net/antonkeks/database-refactoring">http://www.slideshare.net/antonkeks/database-refactoring</a></li></ul></ul></div><ul></ul></div></div><div class="separator" style="clear: both; text-align: center;"></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bad Smells (Mal Cheiros) Em Bancos De Dados]]></title>
    <link href="http://fabriziomello.github.io/blog/2013/06/10/bad-smells-mal-cheiros-em-bancos-de/"/>
    <updated>2013-06-10T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2013/06/10/bad-smells-mal-cheiros-em-bancos-de</id>
    <content type="html"><![CDATA[<div class='post'>
Uma estrutura de um banco de dados, diferentemente da estrutura de um software, tende a deteriorar naturalmente com o passar do tempo. Dentre várias causas de deterioração podemos citar o crescimento progressivo do volume de dados devido ao aumento natural de usuários que o utilizam e também ao seu próprio tempo de uso, tornando um modelo de dados que no início era eficiente para solução proposta em um modelo ineficiente e defasado.<br /><br />Essa deterioração natural aliada a mudanças em requisitos de negócio exigem modificações e refatorações tanto no software que os implementa quanto em seus bancos de dados. Entretanto a <a href="http://fabriziomello.blogspot.com.br/2013/06/database-refactoring.html">refatoração de um banco de dados</a> é mais complexa que a de um software devido aos seguintes motivos: (i) além de manter comportamento também é necessário manter as informações (dados) e (ii) acoplamento com diversas origens (outras aplicações, <i>frameworks</i>, integrações, etc).<br /><br />Devido a essas dificuldades a evolução de uma estrutura de banco de dados torna-se um desafio, ocorrendo assim um fenômeno conhecido como <i>Bad Smells</i>&nbsp;(mal cheiros), da mesma forma que ocorre com o código de um software. Em software um <a href="http://martinfowler.com/bliki/CodeSmell.html"><i>code smell</i>&nbsp;(<i>bad smell</i>)</a> é uma categoria comum de problema no código fonte que indica a necessidade de refatoração, e o mesmo ocorre com bancos de dados, onde são chamados <i><a href="http://www.agiledata.org/essays/databaseRefactoringSmells.html">database smells</a></i>.<br /><br />Abaixo segue uma lista de alguns <i><a href="http://www.agiledata.org/essays/databaseRefactoringSmells.html">database smells</a></i>:<br /><ul><li><i>Multi-purpose column</i> (coluna com mais de uma função)</li><li><i>Multi-purpose table</i> (tabela com mais de uma função)</li><li><i>Redundant data</i> (dados redundantes/repetidos)</li><li><i>Tables with many columns</i> (tabelas com muitas colunas)</li><li><i>"Smart" columns</i> (colunas "espertas")</li><li><i>Lack of constraints</i> (falta de restrições)</li><li><i>Fear of change</i> (medo da mudança)</li></ul><div>Dentre os <i>database smells</i>&nbsp;citados acima, devemos ter atenção especial ao "<i>Fear of change</i>", pois pode ser considerado o pior de todos, pois:</div><div><ul><li>inibe a inovação,&nbsp;</li><li>reduz a efetividade,&nbsp;</li><li>produz ainda mais bagunça e&nbsp;</li><li>ao longo do tempo a situação fica cada vez pior.&nbsp;</li></ul></div><div>Lembra do valor "<a href="http://desenvolvimentoagil.com.br/xp/valores/coragem/">Coragem</a>" do <a href="http://desenvolvimentoagil.com.br/xp/">XP</a> (eXtreme Programming)? Mudança é algo que deve ser considerado natural e irá acontecer em projetos de software, isso é um fato, não podemos fugir disso, então precisamos das práticas e ferramentas adequadas para que a mudança não seja um entrave na evolução do seu projeto, e sim algo natural e, de certa forma, trivial para sua equipe, e o mesmo deve ocorrer com seu banco de dados.</div><div><br /></div><div>Esse post é apenas uma introdução a este assunto pouco explorado e que tenho como proposta para conclusão de <a href="http://www.uniritter.edu.br/pos/tecnologia/metodos_ageis/">Pós-Graduação em Tecnologias Aplicadas a Sistemas de Informações com Métodos Ágeis</a> que estou realizando na&nbsp;<a href="http://www.uniritter.edu.br/">http://www.uniritter.edu.br</a>.</div><div><br /></div><div>A idéia é montar uma <a href="http://pt.wikipedia.org/wiki/Taxonomia">taxonomia</a> de <i>Database Smells</i> através de um catálogo, inclusive sugerindo os <i><a href="http://fabriziomello.blogspot.com.br/2013/06/database-refactoring.html">Database Refactoring</a></i> que podem ser utilizados em sua solução, e futuramente, quem sabe em um futuro trabalho de Mestrado fazer um paralelo dos <i>Database Smells</i>&nbsp;com <i>Code Smells</i>, principalmente se os mal cheiros em códigos podem refletir mal cheiros no seu banco de dados. ;-)</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Gabriel Prestes</div>
<div class='content'>
Excelente o post Fabrízio, pela introdução ao assunto, aguardo novos posts. </div>
</div>
<div class='comment'>
<div class='author'>Fabrízio de Royes Mello</div>
<div class='content'>
O formato do trabalho será de um artigo científico e não de um TCC, porque é para conclusão de uma Pós-Graduação e não Graduação.<br /><br />Mas com certeza vou compartilhar quando estiver pronto.<br /><br />Obrigado.</div>
</div>
<div class='comment'>
<div class='author'>Webeople</div>
<div class='content'>
Bom trabalho, meu caro.<br /><br />Quando o tcc estiver pronto, compartilha aí. Gostaria muito de ler.<br /><br />Abs,</div>
</div>
<div class='comment'>
<div class='author'>Eduardo A. Fiorezi</div>
<div class='content'>
Muito bom Fabrízio. Ainda não tive a oportunidade de ler o Database Refactoring, mas na época que foi lançado eu estava escrevendo meu tcc.. Ótimo artigo. Abraços</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Palestra Database Refactoring Com PostgreSQL - URCAMP Alegrete/RS]]></title>
    <link href="http://fabriziomello.github.io/blog/2009/07/01/palestra-database-refactoring-com/"/>
    <updated>2009-07-01T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2009/07/01/palestra-database-refactoring-com</id>
    <content type="html"><![CDATA[<div class='post'>
Ontem (30/06/2009) ministrei a palestra de Database Refactoring para os alunos do Curso de Informática da Universidade da Região da Campanha (URCAMP) de Alegrete/RS.<br /><br />O evento contou com a presença de alunos dos últimos semestres do Curso de Informática bem como de alguns docentes do Curso.<br /><br />Os slides da palestra estão disponíveis em:<br /><br /><a href="http://www.slideshare.net/fabriziomello/database-refactoring-postgresql-urcamp-alegrete-2009">http://www.slideshare.net/fabriziomello/database-refactoring-postgresql-urcamp-alegrete-2009</a><br /><br />As fotos também estão disponíveis em:<br /><br /><a href="http://picasaweb.google.com/fabriziomello/UrcampAlegreteRS2009">http://picasaweb.google.com/fabriziomello/UrcampAlegreteRS2009</a><br /><br />Agradeço o convite feito pelos professores Cristian Talles e Eveline Guerra bem como a todos que participaram do evento, para mim foi uma honra trocar conhecimento com todos vocês.<br /><br /><br />Cordialmente,<br /><br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refatoração De Banco De Dados - Porto Alegre AgileWeekend 2009]]></title>
    <link href="http://fabriziomello.github.io/blog/2009/04/27/refatoracao-de-banco-de-dados-porto/"/>
    <updated>2009-04-27T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2009/04/27/refatoracao-de-banco-de-dados-porto</id>
    <content type="html"><![CDATA[<div class='post'>
Esse final de semana (25 e 26 de abril de 2009) tive a oportunidade de participar, como palestrante, do <a href="http://agileweekend.guma-rs.org/">Porto Alegre AgileWeekend 2009 [1]</a>, discursando  sobre Refatoração de Banco de Dados (Database Refactoring) <a href="http://www.slideshare.net/fabriziomello/refatorao-banco-de-dados-agileweekend2009">[2]</a> utilizando o PostgreSQL.<br /><br />O evento contou com conteúdo de alto nível, demonstrando cases de sucesso na  aplicação de métodos e práticas ágeis no desenvolvimento de software  tais como:<br /><br />- Lean Software Development<br />- eXtreme Programming<br />- Scrum<br />- FDD (Feature-Driven Development), TDD (Test-Driven Developmento, BDD  (Behavior-Driven Development)<br />- etc...<br /><br />Além do alto nível dos conteúdos apresentados também não posso deixar de mencionar a alta qualidade da organização do evento que beirou a "perfeição" (e sem exageros... mas isso não seria resultado da aplicação prática de algum Métodos Ágil por parte de seus organizadores???).<br /><br />O que pude perceber ao longo de todas exposições, é que alguns dos objetivos desses "Métodos Ágeis" são a Satisfação do  Cliente e Qualidade do Produto entregue (aquilo que buscamos  constantemente).<br /><br />Atualmente existem diversas empresas (inclusive de nível global)  investindo em Métodos Ágeis, tais como:<br />- Borland<br />- Adobe<br />- Toyota (Criadora do Lean Software Development, que pode-se dizer que é  "pai" de todos métodos ágeis)<br />- Globo.com<br />- etc...<br /><br />Segundo um representante da <a href="http://www.rs.sucesu.org.br/">SUCESU-RS [4]</a>:  "Aqui no nosso estado os CIOs  das 40 maiores empresas estão olhando com "muito carinho" para os  métodos ágeis". Será que isso não pode-se caracterizar uma tendência de mercado????<br /><br /><br />Outro ponto positivo é que o evento foi bem diversificado, demonstrando além  de questões técnicas a respeito de desenvolvimento de software, muita  informação Gerencial, no que diz respeito aos objetivos empresariais...  as práticas para maximizar resultados e eliminar desperdícios, dentre  outros.<br /><br /><br />Em uma palestra sobre SCRUM foi comentada a utilização de práticas ágeis aplicadas ao  setor de Suporte de uma empresa de desenvolvimento de software... em  outra o pessoal está utilizando essa "cultura" nos processos  administrativos da empresa... então a "Cultura Ágil" vai além do  desenvolvimento de software?!?!?!  Não surpreendam-se de em algum tempo ouvirmos coisas do tipo "Refatorar Processos de Negócio!"... "Refatorando as Finanças de sua Empresa"... (adoro refatoração... hehehehe)<br /><br /><br />Abaixo seguem alguns links com informações sobre o evento, a minha  palestra e algumas fotos:<br /><br />[1] Site do Evento<br /><a class="moz-txt-link-freetext" href="http://agileweekend.guma-rs.org/">http://agileweekend.guma-rs.org/</a><br /><br />[2] Slides da minha Palestra<br /><a class="moz-txt-link-freetext" href="http://www.slideshare.net/fabriziomello/refatorao-banco-de-dados-agileweekend2009">http://www.slideshare.net/fabriziomello/refatorao-banco-de-dados-agileweekend2009</a><br /><br />[3] Fotos do Evento<br /><a class="moz-txt-link-freetext" href="http://picasaweb.google.com/fabriziomello/Agileweekend2009">http://picasaweb.google.com/fabriziomello/Agileweekend2009</a><br /><br />[4] Site SUCESU-RS<br /><a class="moz-txt-link-freetext" href="http://www.rs.sucesu.org.br/">http://www.rs.sucesu.org.br/</a><br /><br />Cordialmente,<br /><br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Luiz Cláudio Parzianello</div>
<div class='content'>
Grande Fabrizio! Obrigado por ter acreditado em nosso sonho e ter participado do evento! Gostaria de acrescentar uma informação ao teu post: o representante da Sucesu-RS era o Eduardo Arruda, Presidente da entidade também CIO do Tribunal de Justiça do Estado do Rio Grande do Sul. Outra coisa ... coisa da idéia da refatoração! Vamos refatorar diariamente nossas vidas!!! Hehehe!!!! Abraços!</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
