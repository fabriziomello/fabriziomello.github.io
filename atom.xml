<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fabrízio de Royes Mello]]></title>
  <link href="http://fabriziomello.github.io/atom.xml" rel="self"/>
  <link href="http://fabriziomello.github.io/"/>
  <updated>2014-04-27T01:35:33-03:00</updated>
  <id>http://fabriziomello.github.io/</id>
  <author>
    <name><![CDATA[Fabrízio de Royes Mello]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Projeto Aceito No Google Summer of Code 2014 (GSoC2014)]]></title>
    <link href="http://fabriziomello.github.io/blog/2014/04/26/projeto-aceito-no-google-summer-of-code-2014-gsoc2014/"/>
    <updated>2014-04-26T12:24:51-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2014/04/26/projeto-aceito-no-google-summer-of-code-2014-gsoc2014</id>
    <content type="html"><![CDATA[<p>Amigos, gostaria de compartilhar um pouco de minha emoção e alegria, pois <a href="http://www.google-melange.com/gsoc/project/details/google/gsoc2014/fabriziomello/5738600293466112">minha proposta de projeto</a> foi aceita para o <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2014">&ldquo;Google Summer of Code 2014&rdquo;</a>.</p>

<p>Nos próximos meses estarei desenvolvendo uma nova funcionalidade para o <a href="http://www.postgresql.org">PostgreSQL</a> financiado pelo <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2014">Google</a>, como projeto de pesquisa do curso de Pós-Graduação em <a href="http://www.uniritter.edu.br/pos/tecnologia/metodos_ageis">Tecnologias Aplicadas a Sistemas de Informação com Métodos Ágeis</a> pela <a href="http://www.uniritter.edu.br">Uniritter Porto Alegre/RS</a>.</p>

<p>O principal objetivo deste projeto é permitir que <a href="http://www.postgresql.org/docs/current/static/sql-createtable.html">&ldquo;unlogged tables&rdquo;</a> (tabelas que não geram registros no <a href="http://www.postgresql.org/docs/current/static/wal-intro.html">WAL</a>) sejam transformadas em tabelas regulares (que geram registros no WAL) e vice-versa. Para que isso aconteça será adicionado mais duas cláusulas ao comando sql &ldquo;ALTER TABLE&rdquo;:</p>

<pre><code>ALTER TABLE table_name SET LOGGED;
ALTER TABLE table_name SET UNLOGGED;
</code></pre>

<p>Quem tiver interesse em acompanhar a realização do projeto pode visitar a <a href="http://wiki.postgresql.org/wiki/Allow_an_unlogged_table_to_be_changed_to_logged_GSoC_2014">página do projeto no Wiki da comunidade PostgreSQL</a> e também o <a href="https://github.com/fabriziomello/postgres/tree/gsoc2014_alter_table_set_logged">código fonte no github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Novidades]]></title>
    <link href="http://fabriziomello.github.io/blog/2014/03/10/novidades/"/>
    <updated>2014-03-10T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2014/03/10/novidades</id>
    <content type="html"><![CDATA[<div class='post'>
Em breve teremos novidades por aqui, pois começarei um trabalho de tradução dos posts do blog <a href="http://www.depesz.com/">http://www.depesz.com/</a> do amigo Hubert Depesz Lubaczewski, da Polônia.<br /><br />O blog do Hubert é bem ativo e possui inúmeros posts interessantes e conversando com ele achamos válida a idéia de ter uma versão em PT-BR do mesmo.<br /><br />Logo teremos o primeiro post aqui&#8230; aguardem&#8230;</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Refactoring]]></title>
    <link href="http://fabriziomello.github.io/blog/2013/06/10/database-refactoring/"/>
    <updated>2013-06-10T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2013/06/10/database-refactoring</id>
    <content type="html"><![CDATA[<div class='post'>
<h4><b>Contextualização</b></h4>Refatoração&nbsp;de código&nbsp;(<i><a href="https://en.wikipedia.org/wiki/Code_refactoring">Code Refactoring</a></i>) é uma disciplina/processo que consiste em melhorar a estrutura interna de um software sem modificar seu comportamento externo, e uma Refatoração de Banco de Dados (<i><a href="https://en.wikipedia.org/wiki/Database_refactoring">Database Refactoring</a></i>) parte do mesmo princípio, porém além de manter o comportamento externo também deve manter a semântica da informação que ele mantém/armazena, e por esse motivo é considerada mais difícil.<br /><br />Um outro conceito que posso destacar a respeito de <i>Database Refactoring</i> é:<br /><i>&#8220;Mudança disciplinada na estrutura de uma base de dados que não altera sua semântica, porém melhora seu projeto e minimiza a introdução de dados inconsistentes&#8221;</i><br /><br />O ponto interessante deste último é o texto &#8221;<i>minimiza a introdução de dados inconsistentes</i>&#8221;, pois esse é o grande objetivo de realizarmos um <i>refactoring</i> na estrutura de um banco de dados, ou seja, melhorar o <i>desing</i>&nbsp;atual para melhorar a consistência dos dados e também a qualidade dos novos dados que serão adicionados ao seu banco de dados.<br /><br />E esta tarefa não é das mais simples, pois existe um fator preponderante no que diz respeito a dificuldade de execução deste tipo de <i>refactoring</i> que é o acoplamento, que será visto logo a seguir.<br /><h4><b>Acoplamento</b></h4><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; text-align: center;"><tbody><tr><td style="text-align: center;"><span style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><a href="http://www.agiledata.org/essays/databaseRefactoring.html#Figure1BestCaseScenario"><img border="0" height="200" src="http://3.bp.blogspot.com/--JcWNVQiwEw/UbVRwiLB_pI/AAAAAAAAAag/DKCZt5EndPI/s200/dataRefactoringBestCase.gif" width="175" /></a></span></td></tr><tr><td class="tr-caption" style="text-align: center;"><a href="http://www.agiledata.org/essays/databaseRefactoring.html#Figure1BestCaseScenario">Figura 1. Baixo Acoplamento</a></td></tr></tbody></table>É a medida de dependência entre dois elementos. Quanto mais acoplados dois elementos estiverem, maior a chance que a mudança em um implique na mudança em outro.<br /><br /><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; text-align: left;"><tbody><tr><td style="text-align: center;"><span style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><a href="http://www.agiledata.org/essays/databaseRefactoring.html#Figure2WorstCaseScenario"><img border="0" height="171" src="http://4.bp.blogspot.com/-G1MJ8-P0mPw/UbVRyTd6jFI/AAAAAAAAAas/LqwBNfBbVvc/s200/dataRefactoringWorstCase.gif" width="200" /></a></span></td></tr><tr><td class="tr-caption" style="text-align: center;"><a href="http://www.agiledata.org/essays/databaseRefactoring.html#Figure2WorstCaseScenario">Figura 2. Alto Acoplamento</a></td></tr></tbody></table>Simples assim, quanto mais o seu banco de dados estiver acoplado, ou seja, dependente de diversas aplicações externas, mais difícil será a aplicação de um <i>refactoring</i>.<br /><br />A Figura 1 demonstra um cenário &#8221;<i>Single-Database Application</i>&#8221; que é bem simplificado, onde a aplicação de um <i>refactoring</i>&nbsp;será mais tranquilo.<br /><br />Com certeza o cenário da Figura 2, o &#8221;<i>Multi-Database Application</i>&#8220;&nbsp;é o pior caso, pois exige muito cuidado e planejamento para execução do <i>refactoring</i>, então veremos a seguir uma sugestão de processo para execução.<br /><br /><h4><b>Processo de Refatoração</b></h4><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="clear: right; float: right; margin-bottom: 1em; text-align: right;"><tbody><tr><td style="text-align: center;"><span style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><a href="http://www.agiledata.org/essays/databaseRefactoring.html#Figure3Process"><img border="0" height="320" src="http://2.bp.blogspot.com/-GuIfZIWdI9M/UbVNf7VP42I/AAAAAAAAAaQ/IuYaQ9S4wPk/s320/databaseRefactoringProcess.gif" width="252" /></a></span></td></tr><tr><td class="tr-caption" style="text-align: center;">Figura 3. Processo de&nbsp;<i>Database Refactoring</i></td></tr></tbody></table>Um processo é um conjunto organizado de atividades com um objetivo em comum. Executar um&nbsp;<i>database refactoring</i>&nbsp;em um cenário &#8221;<i>Single-Database Application</i>&#8221; ou &#8221;<i>Multi-Application Database</i>&#8221; requer um processo, por mais simples que seja. A grande diferença na execução em ambos cenários é que no caso do &#8221;<i>Multi-Application Database</i>&#8221; o período de transição (mais abaixo falaremos) geralmente será mais longo.<br /><br />É bom sempre ter em mente que um <i>database refactoring</i>, como já vimos,&nbsp;não é uma atividade simples então caso seja identificada a real necessidade de refatorar um banco de dados então podemos usar o seguinte roteiro (processo) para se guiar:<br /><ul><li>Escolher o <i>refactoring</i> mais apropriado;</li><li>Depreciar o esquema original;</li><li>Testar antes, durante e após;</li><li>Modificar esquema;</li><li>Migrar os dados;</li><li>Modificar código externo;</li><li>Executar testes de regressão;</li><li>Versionar seu trabalho;</li><li>Anunciar o refactoring.</li></ul><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-jEsZQM4gxVU/UbVWvbD4CsI/AAAAAAAAAa8/7VDnxsuE6E0/s1600/process-refactoring-regra-geral.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="88" src="http://1.bp.blogspot.com/-jEsZQM4gxVU/UbVWvbD4CsI/AAAAAAAAAa8/7VDnxsuE6E0/s320/process-refactoring-regra-geral.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Figura 4. Regra Geral Processo Refatoração</td></tr></tbody></table><br />Na Figura 4 é demonstrado um pequeno processo descrevendo um fluxo básico para aplicação de um <i>refactoring</i>.<br /><br />Atente bem para o &#8220;Período de Transição&#8221;, que é a fase mais importante, principalmente para cenários &#8221;<i>Multi-Database Application</i>&#8221; (Figura 2), onde você precisa ter em mente que não conseguirá realizar o <i>refactoring</i>&nbsp;e fazer o <i>deploy</i> em produção de todas as aplicações ao mesmo tempo. Na verdade você nem conseguirá alterar todas as aplicações ao mesmo tempo, principalmente se você tiver dependência de terceiros, então você precisará suportar o esquema original e o esquema resultante ao mesmo tempo, para somente quando todas aplicações estiverem suportando apenas o esquema resultante, ou novo esquema, você poderá aposentar de vez o antigo esquema e assim finalizar este período.<br /><br /><h4><b>Estratégias de <i>Database Refactorings</i></b></h4>Existem alguns pontos a considerar com estratégias para adoção de um <i>database refactoring</i>:<br /><br /><ul><li>Pequenas mudanças são mais fáceis de aplicar;</li><li>Identifique unicamente cada <i>refactoring</i>;</li><li>Implemente uma grande mudança realizando várias pequenas mudanças;</li><li>Tenha uma tabela de configuração/versionamento do seu banco de dados;</li><li>Priorize <i>triggers</i>&nbsp;ao invés de <i>views</i>&nbsp;ou sincronizações em lote;</li><li>Escolha um período de transição suficiente para realizar as mudanças;</li><li>Simplifique sua estratégia de controle de versão de banco de dados;</li><li>Simplifique negociações com outros times;</li><li>Encapsule acesso ao banco de dados;</li><li>Habilite-se a montar facilmente um ambiente de banco de dados;</li><li>Não duplique SQL;</li><li>Coloque os ativos de banco de dados sobre controle de mudanças;</li><li>Seja cuidadoso com políticas.</li></ul><div>Os items acima mostram apenas algumas sugestões, em forma de &#8220;lições aprendidas&#8221;, de algumas estratégias que você pode considerar quando tiver a necessidade de realizar um <i>refactoring</i>.</div><div>Para apoiar essas estratégias existe um catálogo que descrevem diversos tipos de <i>refactorings</i>&nbsp;em bancos de dados&nbsp;e exemplos de uso, que veremos a seguir.</div><div><br /></div><h4><b><a href="http://www.agiledata.org/essays/databaseRefactoringCatalog.html">Catálogo de&nbsp;<i>Database Refactorings</i></a></b></h4><div>Este catálogo é dividido em algumas categorias:<br /><br /><ul><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogStructural.html">Structural</a></i>: são mudanças na estrutura do banco de dados (tabelas, colunas, visões, etc).</li><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogDataQuality.html">Data Quality</a></i>: são mudanças que melhoram a qualidade das informações contidas em um banco de dados.</li><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogReferentialIntegrity.html">Referential Integrity</a></i>: são mudanças que asseguram que uma linha referenciada exista em outra relação e/ou assegura que uma linha que não é mais necessária seja removida apropriadamente.</li><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogArchitectural.html">Architectural</a></i>: são mudanças que melhoram a maneira que programas externos interagem com a base de dados.</li><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogMethod.html">Method</a></i>: são mudanças que melhoram a qualidade de uma Procedure um Função.</li><li><i><a href="http://www.agiledata.org/essays/databaseRefactoringCatalogTransformations.html">Transformations</a></i>: mudanças que alteram a semântica do esquema do banco pela adição de novas funcionalidades.</li></ul><br /><div>No meu <a href="https://github.com/fabriziomello/database_refactoring">github</a> é possível encontrar exemplos práticos de aplicação passo-a-passo de um refactoring em um <a href="https://github.com/fabriziomello/database_refactoring/blob/master/model/01_modelo_inicial.png">modelo inicial</a>, passando por um <a href="https://github.com/fabriziomello/database_refactoring/blob/master/model/02_modelo_fks.png">período de transição</a> e chegando ao <a href="https://github.com/fabriziomello/database_refactoring/blob/master/model/03_modelo_city.png">modelo final</a>.&nbsp;</div><div><br /></div><div><h4>Considerações Finais</h4>Devemos levar em consideração que apesar destas técnicas serem direcionadas para refatoração, ou seja, mudar estrutura sem mudar sua semântica, as mesmas podem e devem ser utilizadas para evolução da sua aplicação, ou seja, se você precisa construir uma nova <i>feature</i>&nbsp;em sua aplicação que está em produção, você poderá recorrer das práticas aqui apresentadas para evoluir seu esquema de forma mais consistente e segura.<br /><br />Baseado no exposto podemos facilmente responder a pergunta &#8220;Por quê Refatorar?&#8221;:<br /><br /><ul><li>aceitar mudança de escopo;</li><li>fornecer feedback rápido;</li><li>melhoria contínua;</li><li>aumentar simplicidade para facilitar entendimento;</li><li>tornar os modelos mais próximos do mundo real;</li><li>termos modelos simples para facilitar:</li><ul><li>manutenção e</li><li>evolução da aplicação</li></ul></ul>E para refatorarmos precisamos ter conhecimento, disciplina, simplicidade, bom senso e persistência, sem contar no ponto fundamental que é organização.<br /><br /><h4>Referências</h4><ul><li>Livros:&nbsp;</li><ul><li><a href="http://www.ambysoft.com/books/refactoringDatabases.html">Refactoring Databases</a> (Scott W. Ambler e Pramod J. Sadalage)</li><li><a href="http://www.ambysoft.com/books/agileDatabaseTechniques.html">Agile Database Techniques</a> (Scott W. Ambler)</li><li><a href="http://martinfowler.com/books/refactoring.html">Refactoring</a> (Martin Fowler)</li><li><a href="http://www.ambysoft.com/books/agileModeling.html">Agile Modeling</a> (Scott W. Ambler)&nbsp;</li></ul><li>Links:</li><ul><li><a href="http://www.agiledata.org/">http://www.agiledata.org</a></li><li><a href="http://www.databaserefactoring.org/">http://www.databaserefactoring.org</a></li><li><a href="http://visaoagil.wordpress.com/">http://visaoagil.wordpress.com</a></li><li><a href="http://www.refactoring.com/">http://www.refactoring.com</a></li><li><a href="http://www.postgresql.org/">http://www.postgresql.org</a></li><li><a href="http://www.epictest.org/">http://www.epictest.org</a></li><li><a href="http://www.slideshare.net/diogobiazus/testes-unitarios-com-postgre-sql">http://www.slideshare.net/diogobiazus/testes-unitarios-com-postgre-sql</a></li></ul><li>Slides</li><ul><li><a href="http://www.slideshare.net/fabriziomello/tag/refactoring">http://www.slideshare.net/fabriziomello/tag/refactoring</a></li><li><a href="http://www.slideshare.net/antonkeks/database-refactoring">http://www.slideshare.net/antonkeks/database-refactoring</a></li></ul></ul></div><ul></ul></div></div><div class="separator" style="clear: both; text-align: center;"></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bad Smells (Mal Cheiros) Em Bancos De Dados]]></title>
    <link href="http://fabriziomello.github.io/blog/2013/06/10/bad-smells-mal-cheiros-em-bancos-de/"/>
    <updated>2013-06-10T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2013/06/10/bad-smells-mal-cheiros-em-bancos-de</id>
    <content type="html"><![CDATA[<div class='post'>
Uma estrutura de um banco de dados, diferentemente da estrutura de um software, tende a deteriorar naturalmente com o passar do tempo. Dentre várias causas de deterioração podemos citar o crescimento progressivo do volume de dados devido ao aumento natural de usuários que o utilizam e também ao seu próprio tempo de uso, tornando um modelo de dados que no início era eficiente para solução proposta em um modelo ineficiente e defasado.<br /><br />Essa deterioração natural aliada a mudanças em requisitos de negócio exigem modificações e refatorações tanto no software que os implementa quanto em seus bancos de dados. Entretanto a <a href="http://fabriziomello.blogspot.com.br/2013/06/database-refactoring.html">refatoração de um banco de dados</a> é mais complexa que a de um software devido aos seguintes motivos: (i) além de manter comportamento também é necessário manter as informações (dados) e (ii) acoplamento com diversas origens (outras aplicações, <i>frameworks</i>, integrações, etc).<br /><br />Devido a essas dificuldades a evolução de uma estrutura de banco de dados torna-se um desafio, ocorrendo assim um fenômeno conhecido como <i>Bad Smells</i>&nbsp;(mal cheiros), da mesma forma que ocorre com o código de um software. Em software um <a href="http://martinfowler.com/bliki/CodeSmell.html"><i>code smell</i>&nbsp;(<i>bad smell</i>)</a> é uma categoria comum de problema no código fonte que indica a necessidade de refatoração, e o mesmo ocorre com bancos de dados, onde são chamados <i><a href="http://www.agiledata.org/essays/databaseRefactoringSmells.html">database smells</a></i>.<br /><br />Abaixo segue uma lista de alguns <i><a href="http://www.agiledata.org/essays/databaseRefactoringSmells.html">database smells</a></i>:<br /><ul><li><i>Multi-purpose column</i> (coluna com mais de uma função)</li><li><i>Multi-purpose table</i> (tabela com mais de uma função)</li><li><i>Redundant data</i> (dados redundantes/repetidos)</li><li><i>Tables with many columns</i> (tabelas com muitas colunas)</li><li><i>&#8220;Smart&#8221; columns</i> (colunas &#8220;espertas&#8221;)</li><li><i>Lack of constraints</i> (falta de restrições)</li><li><i>Fear of change</i> (medo da mudança)</li></ul><div>Dentre os <i>database smells</i>&nbsp;citados acima, devemos ter atenção especial ao &#8221;<i>Fear of change</i>&#8221;, pois pode ser considerado o pior de todos, pois:</div><div><ul><li>inibe a inovação,&nbsp;</li><li>reduz a efetividade,&nbsp;</li><li>produz ainda mais bagunça e&nbsp;</li><li>ao longo do tempo a situação fica cada vez pior.&nbsp;</li></ul></div><div>Lembra do valor &#8221;<a href="http://desenvolvimentoagil.com.br/xp/valores/coragem/">Coragem</a>&#8221; do <a href="http://desenvolvimentoagil.com.br/xp/">XP</a> (eXtreme Programming)? Mudança é algo que deve ser considerado natural e irá acontecer em projetos de software, isso é um fato, não podemos fugir disso, então precisamos das práticas e ferramentas adequadas para que a mudança não seja um entrave na evolução do seu projeto, e sim algo natural e, de certa forma, trivial para sua equipe, e o mesmo deve ocorrer com seu banco de dados.</div><div><br /></div><div>Esse post é apenas uma introdução a este assunto pouco explorado e que tenho como proposta para conclusão de <a href="http://www.uniritter.edu.br/pos/tecnologia/metodos_ageis/">Pós-Graduação em Tecnologias Aplicadas a Sistemas de Informações com Métodos Ágeis</a> que estou realizando na&nbsp;<a href="http://www.uniritter.edu.br/">http://www.uniritter.edu.br</a>.</div><div><br /></div><div>A idéia é montar uma <a href="http://pt.wikipedia.org/wiki/Taxonomia">taxonomia</a> de <i>Database Smells</i> através de um catálogo, inclusive sugerindo os <i><a href="http://fabriziomello.blogspot.com.br/2013/06/database-refactoring.html">Database Refactoring</a></i> que podem ser utilizados em sua solução, e futuramente, quem sabe em um futuro trabalho de Mestrado fazer um paralelo dos <i>Database Smells</i>&nbsp;com <i>Code Smells</i>, principalmente se os mal cheiros em códigos podem refletir mal cheiros no seu banco de dados. ;-)</div></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Gabriel Prestes</div>
<div class='content'>
Excelente o post Fabrízio, pela introdução ao assunto, aguardo novos posts. </div>
</div>
<div class='comment'>
<div class='author'>Fabrízio de Royes Mello</div>
<div class='content'>
O formato do trabalho será de um artigo científico e não de um TCC, porque é para conclusão de uma Pós-Graduação e não Graduação.<br /><br />Mas com certeza vou compartilhar quando estiver pronto.<br /><br />Obrigado.</div>
</div>
<div class='comment'>
<div class='author'>Webeople</div>
<div class='content'>
Bom trabalho, meu caro.<br /><br />Quando o tcc estiver pronto, compartilha aí. Gostaria muito de ler.<br /><br />Abs,</div>
</div>
<div class='comment'>
<div class='author'>Eduardo A. Fiorezi</div>
<div class='content'>
Muito bom Fabrízio. Ainda não tive a oportunidade de ler o Database Refactoring, mas na época que foi lançado eu estava escrevendo meu tcc.. Ótimo artigo. Abraços</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL 9.3devel - Nova Extensão "Postgres_fdw"]]></title>
    <link href="http://fabriziomello.github.io/blog/2013/02/21/postgresql-93devel-nova-extensao/"/>
    <updated>2013-02-21T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2013/02/21/postgresql-93devel-nova-extensao</id>
    <content type="html"><![CDATA[<div class='post'>
Apartir da <a href="http://www.postgresql.org/docs/9.1/static/release-9-1.html">release 9.1</a> o PostgreSQL adicionou suporte a <a href="http://www.postgresql.org/docs/9.1/static/sql-createforeigntable.html">foreign tables</a>, viabilizando assim uma forma simples de <a href="http://en.wikipedia.org/wiki/SQL/MED">gerenciar fontes de dados externas</a> dentro do <a href="http://wiki.postgresql.org/wiki/SQL/MED">PostgreSQL</a>.<br /><br />Através dessa infraestrutura é possível a <a href="http://www.postgresql.org/docs/9.2/static/fdwhandler.html">implementação dos FDW (Foreign Data Wrapper)</a>, que são uma espécie de driver para acessar uma fonte de dados externa. <br /><br />Já existem <a href="http://wiki.postgresql.org/wiki/Foreign_data_wrappers">diversos FDW implementados</a> que permitem acessar outros bancos de dados (oracle, mysql, etc), arquivos (texto, csv, etc), bases NoSQL (mongodb, couchdb, redis, etc) e outras fontes de dados diferentes, tais como: twitter, ldap, www, etc.<br /><br />Hoje foi commitado no git do PostgreSQL um FDW específico para acessar bases PostgreSQL, chamado &#8221;<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=d0d75c402217421b691050857eb3d7af82d0c770">postgres_fdw</a>&#8221;, então vou demonstrar como instalar/configurar de uma forma muito simples.<br /><br /><br /><b>1) Instalar o &#8220;postgres_fdw&#8221; apartir do git</b><br /><br />Nesse exemplo vou mostrar como instalar/compilar o PostgreSQL apartir do <a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=summary">git oficial</a>, mas se vc tiver uma conta no <a href="https://github.com/">github</a> pode usar tb o nosso <a href="https://github.com/postgres/postgres">clone do repositório oficial</a>.<br /><br /><pre class="brush: bash; toolbar: false">git clone git://git.postgresql.org/git/postgresql.git<br />cd postgresql<br />./configure --prefix=$HOME/pgsql<br />make<br />make install<br />cd contrib/postgres_fdw<br />make<br />make install<br /></pre><br /><br /><b>2) Inicializar um novo cluster e colocar o PostgreSQL para executar</b><br /><br /><pre class="brush: bash; toolbar: false">$ cd $HOME/pgsql<br />$ mkdir data<br />$ chmod 700 data<br />$ ./bin/initdb -D data <br />$ ./bin/pg_ctl -D data -l startup.log start<br /></pre><br /><br /><b>3) Criar bases e tabela para testes</b><br /><br /><pre class="brush: bash; toolbar: false">$ cd $HOME/pgsql<br />$ ./bin/createdb bd1<br />$ ./bin/createdb bd2<br />$ ./bin/psql bd2 -c "create table foo(bar integer);"<br />$ ./bin/psql bd2 -c "insert into foo(bar) select * from generate_series(1, 10);"<br /></pre><br />Para explicar, criamos 2 (duas) bases de dados &#8220;bd1&#8221; e &#8220;bd2&#8221;, e no &#8220;bd2&#8221; criamos uma tabela chamada &#8220;foo&#8221; a qual iremos acessar apartir do &#8220;bd1&#8221; criando uma foreign table como explicarei em seguida.<br /><br /><br /><b>4) Criar a extensão &#8220;postgres_fdw&#8221; no &#8220;bd1&#8221;</b><br /><br /><pre class="brush: sql; toolbar: false">$ ./bin/psql bd1<br />psql (9.3devel)<br />Type "help" for help.<br /><br />bd1=# CREATE EXTENSION postgres_fdw ;<br />CREATE EXTENSION<br /><br />bd1=# \dx<br />                               List of installed extensions<br />     Name     | Version |   Schema   |                    Description                     <br />--------------+---------+------------+----------------------------------------------------<br /> plpgsql      | 1.0     | pg_catalog | PL/pgSQL procedural language<br /> postgres_fdw | 1.0     | public     | foreign-data wrapper for remote PostgreSQL servers<br />(2 rows)<br /></pre><br /><br /><b>5) Criar conexão com &#8220;bd2&#8221; no &#8220;bd1&#8221;</b><br /><br /><pre class="brush: sql; toolbar: false">bd1=# CREATE SERVER conexao_bd2 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (dbname 'bd2');<br />CREATE SERVER<br /><br />bd1=# \des+<br />                                              List of foreign servers<br />    Name     |  Owner   | Foreign-data wrapper | Access privileges | Type | Version |  FDW Options   | Description <br />-------------+----------+----------------------+-------------------+------+---------+----------------+-------------<br /> conexao_bd2 | fabrizio | postgres_fdw         |                   |      |         | (dbname 'bd2') | <br />(1 row)<br /><br />bd1=# CREATE USER MAPPING FOR current_user SERVER conexao_bd2 ;<br />CREATE USER MAPPING<br /><br />bd1=# \deu+<br />         List of user mappings<br />   Server    | User name | FDW Options <br />-------------+-----------+-------------<br /> conexao_bd2 | fabrizio  | <br />(1 row)<br /></pre><br /><br /><br /><b>6) Acessar a tabela &#8220;foo&#8221; do &#8220;bd2&#8221; apartir do &#8220;bd1&#8221;</b><br /><br /><pre class="brush: sql; toolbar: false">bd1=# CREATE FOREIGN TABLE foo (bar integer) SERVER conexao_bd2 ;<br />CREATE FOREIGN TABLE<br /><br />bd1=# \d<br />            List of relations<br /> Schema | Name |     Type      |  Owner   <br />--------+------+---------------+----------<br /> public | foo  | foreign table | fabrizio<br />(1 row)<br /><br />bd1=# SELECT * FROM foo;<br /> bar <br />-----<br />   1<br />   2<br />   3<br />   4<br />   5<br />   6<br />   7<br />   8<br />   9<br />  10<br />(10 rows)<br /></pre><br /><br /><b>Considerações</b><br /><br />Segundo a própria documentação oficial, o &#8221;<a href="http://www.postgresql.org/docs/devel/static/postgres-fdw.html">postgres_fdw</a>&#8221; é uma alternativa mais robusta em relação ao antigo &#8221;<a href="http://www.postgresql.org/docs/current/static/dblink.html">dblink</a>&#8221; pois nos oferece uma sintaxe mais padronizada e simplificada para acessar tabelas remotas, inclusive com melhor desempenho em muitos casos. <br /><br />E pelo que pude acompanhar do seu desenvolvimento, parece que essa FDW deve servir como modelo para o desenvolvimento de outras FDW para acessar outras bases de dados relacionais.<br /><br />De uma forma muito simples é possível acessar tabelas de outra base de dados PostgreSQL, e o mesmo ocorre com outras fontes de dados, mas por enquanto apenas para leitura (SELECT), entretanto já está em revisão um <a href="https://commitfest.postgresql.org/action/patch_view?id=919">patch</a> para permitir escrita (INSERT/UPDATE/DELETE) em foreign tables, vamos aguardar.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL + Unlogged Tables + Partitioning + Parallel Programming = ETL Reescrito Passando De ~8h Para ~25min De Execução]]></title>
    <link href="http://fabriziomello.github.io/blog/2013/02/20/postgresql-unlogged-tables-partitioning/"/>
    <updated>2013-02-20T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2013/02/20/postgresql-unlogged-tables-partitioning</id>
    <content type="html"><![CDATA[<div class='post'>
Já faz algum tempo que não escrevo nada por aqui, mas não é por falta de tempo ou coisa parecida, é que na realidade não tenho muita intimidade com artigos ou posts em blogs, mas resolvi escrever um &#8220;causo&#8221; a pedido do amigo <a href="http://www.fernandoike.com/">Fernando Ike</a> sobre um <a href="https://twitter.com/fabriziomello/status/295317858177658881">tweet</a> que lancei há algum tempo depois de obter sucesso em um projeto.<br /><br />Aviso antecipadamente que o post é um pouco longo, então se não estiver com paciência agora recomendo vc sair tomar um café (ou uma cerveja) e voltar outra hora&#8230; desculpe mesmo, tentei reduzir o máximo&#8230; :-(<br /><br /><h4>Contextualização</h4>Para vcs entenderem porque cheguei aqui, vou começar dos primórdios&#8230; eu tenho (ou tinha&#8230;hehehe&#8230;) um problema com um ETL em uma aplicação de um cliente (não tenho autorização para &#8220;dar nome aos bois&#8221;) que basicamente processava os registros de uma grande tabela com dados financeiros e gerava uma &#8220;posição&#8221; da mesma calculando correção monetária, juros, multas, descontos, etc&#8230;<br /><br />Esse ETL sempre foi e ainda é ridiculamente simples, porque basicamente é uma PL/pgSQL dentro do PostgreSQL que faz todo esse trabalho de ler os dados de uma tabela, processar e carregar os mesmos em outra tabela. Até aqui tudo bem, sempre funcionou maravilhosamente bem, mas com bases pequenas&#8230; mas também não queremos maravilhas de desempenho processando milhares de registros em uma única transação né, é óbvio que isso gera problemas.<br /><br /><h4>Primeira tentativa&#8230; e um sucesso, digamos, opaco&#8230;</h4>Há alguns anos eu já tinha melhorado essa rotina dividindo o processamento em lotes menores, através de um shell script que fazia esse trabalho de divisão em lotes por uma coluna da tabela que categorizava os registros em um determinado tipo, então primeiro identificamos os tipos existentes na tabela origem e processava os mesmos gerando tabelas individuais para cada tipo, e ao final juntava tudo na tabela de destino e removia as tabelas temporárias&#8230; e vejam só, SEMPRE a MESMA tabela de destino, e para isso precisamos remover os índices, executar o ETL e depois criar novamente os índices para termos um desempenho decente. Claro que junto dessa rotina implementamos também uma outra para expurgo de registros desnecessários/obsoletos (antigos), o que também sempre foi uma rotina que onerava bastante o servidor pois era SEMPRE a MESMA tabela de destino, então imaginem precisar remover uma porção de registros de uma tabela com mais de 100milhões de registros&#8230; isso me lembra um post do <a href="http://tellesr.com/">Fábio Telles</a>: <a href="http://savepoint.blog.br/nao-use-delete-use-insert/">&#8220;Não use DELETE use INSERT&#8221;</a>&nbsp;que ajudou muito para torná-la &#8220;menos pior&#8221;.<br /><br />Na época (2007/2008) essa melhoria ajudou pois desafogou bastante a carga de processamento desse ETL, porém com o passar do tempo e a tabela com dados financeiros crescendo constantemente, o ETL foi ficando cada vez mais oneroso chegando ao seu ápice (final de 2012) de ~8h de execução para processar ~8.5milhões de registros. Eu sei que esse número não é tão expressivo assim, mas a complexidade do processamento envolvido para fazer os cálculos de corrreção, juros e multas e as diversas configurações existentes para cada um justificam, de certa forma, todo esse tempode processamento, sem contar que o coitado do servidor ficava &#8220;imprestável&#8221;.<br /><br />Mas vejam bem, estou falando de dados *financeiros* que sob ponto de vista do negócio se fazem muito necessários para vários tipos de procedimentos e análises. Ainda existem instâncias com bases menores (outros clientes) que rodam esse ETL _diariamente_ por necessidade de negócio, mas nesse cliente em especial não é possível fazer isso, nem que eles quisessem &nbsp;pois o tempo total de execução consume 1/3 de um dia, então os finais de semana são usados :-)<br /><br /><h4>A hora da verdade &#8230;</h4>Após todos os problemas e sem muitas perspectivas, discutimos sobre a re-implementação da PL/pgSQL que executava o ETL, porém isso não é algo trivial, ainda mais em um ERP complexo onde tal iniciativa teria um impacto de grandes proporções visto que seria necessária uma re-modelagem em &nbsp;alguns pontos criticos. Apesar de ser uma idéia interessante, &nbsp;não existe tempo hábil para tanto, pois o cliente não pode mais aguardar uma solução, pois qto mais tempo demorar pior fica.<br /><br />Como eu já tenho algum tempo de estrada com PostgreSQL e conheço bem a estrtutura do ETL e do ERP em questão, sugeri a equipe que eu poderia re-implementar o antigo shell script reaproveitando a PL/pgSQL do ETL existente (sem mudar regras de negócio), usando tecnologias e técnicas conhecidas. Então o que fiz:<br /><br />1) Particionamento da tabela: esse foi o ponto fundamental, pois dividimos a grande tabela em outras menores tomando como base uma coluna que indica a &#8220;data&#8221; em que os dados financeiros foram calculados, e que o ERP usa constantemente para ler informações da mesma, portanto as queries iriam se beneficiar do recurso. Sobre esse assunto, além da <a href="http://www.postgresql.org/docs/current/static/ddl-partitioning.html">documentação oficial</a>, vcs podem dar uma olhada em <a href="http://savepoint.blog.br/?s=particionamento&amp;submit=Pesquisa">alguns artigos</a> recém lançados pelo <a href="http://tellesr.com/">Fábio Telles</a> sobre esse assunto.<br /><br />2) Implementação de um script PHP (não estou de sacanagem&#8230; é PHP mesmo, mas no console) que tivesse a habilidade de gerar processos filhos (fork) para processamento em paralelo, e para isso usei uma <a href="http://blog.motane.lu/2009/01/02/multithreading-in-php/">classe para realizar esse trabalho</a>. Confesso que no inicio tive um certo receio em implementar essa rotina em PHP, inclusive cogitei a possibilidade de fazê-la em Perl, Python ou Ruby, mas como eu domino mais esta do que as outras e o tempo era curto implementei nela mesmo, e os resultados foram muito satisfatórios.<br /><br /><br /><h4>COPY no lugar de INSERT</h4>A primeira coisa que fiz para continuar esse projeto foi *abolir* o INSERT&#8230; isso mesmo&#8230; não tem INSERT&#8230; vc deve estar pensando que estou maluco e se perguntando: &#8220;Tá e como adicionar linhas a uma tabela então?&#8221; R: usando <a href="http://www.postgresql.org/docs/current/static/sql-copy.html">COPY</a>, ao invés de INSERT&#8230; na realidade implementei uma classe que armazena uma coleção (linhas) em memória, e quando eu preciso uso um método para persistir os dados em uma tabela usando COPY&#8230; simples assim&#8230; então o código usado para INSERT é algo do tipo:<br /><br />DDL da tabela exemplo:<br /><pre class="brush: sql; toolbar: false">create table foo (<br />  bar integer<br />);<br /></pre><br />PHP:<br /><pre class="brush: php; toolbar: false">$tabela = new PgCopy('foo');<br />for ($i=0; $i<10; $i++) {<br />    $tabela->bar = $i;<br />    $tabela->insertValue(); // adiciona em memória<br />}<br />$tabela->persist(); // realiza COPY dos dados em memória<br /></pre><br /><br /><h4>Dividir para conquistar</h4>Um dos problemas que tinhamos com o processo antigo era justamente que ele era linear, ou seja, um processo apenas com inicio, meio e fim. Então resolvi investir em programação paralela, dividindo o grande volume de registros a processar em vários trabalhos menores sendo capaz de executar alguns em paralelo, de acordo com o nro de núcleos do servidor.<br /><br />Para tal atividades crio uma tabela que <b>planeja</b> a execução do trabalho, ou seja, cria lotes para que o script possa processar em paralelo, isso baseado em uma chave artifical (sequencial) que existe no modelo e facilitou a criação de trabalhos com lotes de N registros (neste caso usei 1000).<br /><br />A tabela que crio para planejar a execução do ETL é algo do tipo:<br /><pre class="brush: sql; toolbar: false">create table jobs (<br />  id_start bigint,<br />  id_end bigint,<br />  status varchar,<br />  constraint jobs_pk primary key (id_start, id_end),<br />  constraint jobs_status_ck check (status in ('NOT RUNNING', 'RUNNING', 'FINISHED'))<br />);<br /></pre><br />Dessa forma utilizo o &#8220;id_start&#8221; e &#8220;id_end&#8221; para buscar as informações na origem em &#8220;lotes&#8221; de 1000 (mil) registros, e com isso consigo disparar vários processos em paralelo, e dessa forma conseguimos aproveitar melhor os recursos do servidor e assim agilizar bastante o processo.<br /><br /><br /><h4>Unlogged Tables são bem legais</h4>Esse <a href="http://www.postgresql.org/docs/current/static/sql-createtable.html">novo recurso</a> presente apartir da <a href="http://www.postgresql.org/docs/current/interactive/release-9-1.html">versão 9.1</a> permite criar tabelas que não são escritas no <a href="http://www.postgresql.org/docs/current/static/wal.html">log de transações (WAL)</a>, acelerando e muito a inserção de registros na mesma.<br /><br />Assim cada processo disparado pelo script gera e escreve em uma unlogged table os dados, e junto com os processos de trabalho (workers) implementei um processo especial que serve com um tipo de coletor de lixo (garbage collector) para ir gradativamente lendo os lotes processados (unlogged tables geradas) e inserindo (com copy claro) na partição de destino.<br /><br />Com essa estratégia posso ter um certo nível de escala na escrita pois consigo separar as tabelas em tablespaces distintas. Claro que se algum imprevisto ocorrer, tipo um desligamento não previsto do servidor, o próprio script tem habilidade de detectar essa situação e fazer uma limpeza geral antes de inicar um novo processo, até mesmo porque as unlogged tables tem seu conteúdo eliminado nessas situações, e não queremos perder parte dos registros não é mesmo&#8230; :-)<br /><br /><h4>Finalizando&#8230;</h4>Resumindo o que fiz foi:<br />- Particionar uma tabela grande em outras menores<br />- Planejar o processamento dividindo em lotes menores para poder fazer processamento paralelo<br />- Utilizar unlogged tables para receber os dados oriundos dos lotes que são processados em paralelo<br />- Implementar um processo que irá ler os lotes já processados e inserir os registros na partição de destino.<br /><br />Existem outras coisas que foram feitas para melhorar o desempenho, tipo desligar o autovacuum nas tabelas, aumentar o work_mem, criar índices necessários ao final do processamento, e outros que podem ser feitos e que vcs podem visualizar neste <a href="http://savepoint.blog.br/acelerando-a-importacao-de-dados-no-postgresql/">post do Fábio</a>.<br /><br />Bom, se vc chegou até aqui então obrigado pela paciência e se quiser mais informações fico a disposição.<br /><br /><br />&#8212;<br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com<br /></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Fabrízio de Royes Mello</div>
<div class='content'>
Há mto tempo atrás (Ago/2009), segui as instruções contidas em [1] para se cadastrar no Planeta (enviei email e td mais), porém nada aconteceu&#8230; nenhuma resposta, retorno, nada&#8230; :-(<br /><br /><br />[1] http://wiki.postgresql.org.br/PlanetaPostgreSQLBR</div>
</div>
<div class='comment'>
<div class='author'>Unknown</div>
<div class='content'>
O artigo ficou muito massa. Só tem uma coisa que me preocupa aqui&#8230;. qual o motivo do seu blog ainda não estar no nosso planeta.postgresql.org.br ???</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PGBR2013 - Chamada De Trabalhos]]></title>
    <link href="http://fabriziomello.github.io/blog/2013/02/18/pgbr2013-chamada-de-trabalhos/"/>
    <updated>2013-02-18T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2013/02/18/pgbr2013-chamada-de-trabalhos</id>
    <content type="html"><![CDATA[<div class='post'>
Pessoal,<br /><br />Está aberta a <a href="http://pgbr.postgresql.org.br/2013/chamada.php">chamada de trabalhos</a> para o <a href="http://pgbr.postgresql.org.br">PGBR2013</a>. Vamos lá, se inscreva&#8230; estamos ansiosos para saber o que você tem feito com o PostgreSQL&#8230; nos encontramos em Porto Velho/RO de 15 a 17 de agosto de 2013.<br /><br />&#8211;<br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patch Sobre CREATE SCHEMA if NOT EXISTS Aceito Para O PostgreSQL 9.3devel]]></title>
    <link href="http://fabriziomello.github.io/blog/2012/10/04/patch-sobre-create-schema-if-not-exists/"/>
    <updated>2012-10-04T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2012/10/04/patch-sobre-create-schema-if-not-exists</id>
    <content type="html"><![CDATA[<div class='post'>
Após algumas discussões [1] meu patch para adicionar a cláusula &#8220;IF NOT EXISTS&#8221; no &#8220;CREATE SCHEMA&#8221; foi aceito e efetuado o commit na branch master do git oficial do PostgreSQL [2] pelo commiter Mr. Tom Lane.<br /><br />Agora na 9.3 poderemos usar a cláusula &#8220;IF NOT EXISTS&#8221; no &#8220;CREATE SCHEMA&#8221; para que não gere um erro (cancelando transação atual) caso o esquema que está sendo criado já exista, por exemplo:<br /><br />BEGIN;<br />&nbsp; CREATE SCHEMA IF NOT EXISTS foo;<br />&nbsp; CREATE TABLE foo.bar();<br />COMMIT;<br /><br />O exemplo acima caso o esquema &#8220;foo&#8221; já exista não será gerado um erro e a transação irá prosseguir normalmente. O comportamento é similar ao já existente &#8220;IF NOT EXISTS&#8221; do &#8220;CREATE TABLE&#8221; [3].<br /><br />[1]&nbsp;<a href="https://commitfest.postgresql.org/action/patch_view?id=907">https://commitfest.postgresql.org/action/patch_view?id=907</a><br />[2]&nbsp;<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=fb34e94d214d6767910df47aa7c605c452d11c57">http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=fb34e94d214d6767910df47aa7c605c452d11c57</a><br />[3]&nbsp;<a href="http://www.postgresql.org/docs/9.2/interactive/sql-createtable.html">http://www.postgresql.org/docs/9.2/interactive/sql-createtable.html</a><br /><br />&#8212;<br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalar/Configurar "Debugador" De PL/pgSQL (Pldebugger) No PostgreSQL 9.1 Usando Ubuntu]]></title>
    <link href="http://fabriziomello.github.io/blog/2012/05/17/instalarconfigurar-debugador-de-plpgsql/"/>
    <updated>2012-05-17T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2012/05/17/instalarconfigurar-debugador-de-plpgsql</id>
    <content type="html"><![CDATA[<div class='post'>
<br />O passo-a-passo abaixo foi realizado no Ubuntu 10.04LTS com o PostgreSQL 9.1 instalado via ppa do Martin Pitti, mas creio que pode ser executado tranquilamente utilizando a última versão LTS do Ubuntu, a 12.04LTS.<br /><br />1) Download dos fontes do PostgreSQL<br /><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ wget -c http://ftp.postgresql.org/pub/source/v9.1.3/postgresql-9.1.3.tar.bz2</span><br /><br /><br />2) Precisamos instalar ferramentas necessárias para compilação da extensão<br /><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ sudo apt-get update</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ sudo apt-get install build-essential libreadline-dev zlib1g-dev flex bison libssl-dev git-core</span><br /><br /><br />3) Compilar o PostgreSQL e a extensao pldebugger<br /><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ tar jxvf postgresql-9.1.3.tar.bz2</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ cd postgresql-9.1.3</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ ./configure &#8211;prefix=/usr &#8211;includedir=/usr/include &#8211;mandir=/usr/share/man &#8211;infodir=/usr/share/info &#8211;sysconfdir=/etc &#8211;localstatedir=/var &#8211;libexecdir=/usr/lib/postgresql-9.1 &#8211;srcdir=. &#8211;mandir=/usr/share/postgresql/9.1/man &#8211;docdir=/usr/share/doc/postgresql-doc-9.1 &#8211;datadir=/usr/share/postgresql/9.1 &#8211;bindir=/usr/lib/postgresql/9.1/bin &#8211;libdir=/usr/lib/postgresql/9.1/lib &#8211;includedir=/usr/include/postgresql/ &#8211;enable-integer-datetimes &#8211;with-openssl</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ make</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ cd contrib</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ git clone git://git.postgresql.org/git/pldebugger.git</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ cd pldebugger</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ make</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ sudo make install</span><br /><br />Obs: lembrando que, apesar de extenso, o &#8220;./configure&#8221; deve ser todo escrito na mesma linha<br /><br />4) Após compilar e instalar a extensao pldebugger precisamos ativa-a no PostgreSQL<br /><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ sudo vim /etc/postgresql/9.1/main/postgresql.conf</span><br /><br />alterar<br />&nbsp;<br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">&nbsp; #shared_preload_libraries = &#8221;</span><br /><br />para<br />&nbsp;<br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">&nbsp; shared_preload_libraries = &#8216;$libdir/plugin_debugger&#8217;</span><br />&nbsp;<br /><br />5) Reiniciar PostgreSQL<br /><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ sudo /etc/init.d/postgresql restart 9.1</span><br /><br /><br />6) Criar a EXTENSAO &#8220;pldbgpapi&#8221; na(s) base(s) de dados que deseja fazer debug de pls<br /><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">$ psql -U postgres bdteste</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">psql (9.1.3)</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">Digite &#8220;help&#8221; para ajuda.</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;"><br /></span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">bdteste=# CREATE EXTENSION pldbgapi;</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">CREATE EXTENSION</span><br /><span style="font-family: 'Courier New', Courier, monospace; font-size: x-small;">bdteste=#</span><br /><br /><br />7) Pronto, agora vc pode usar o PGAdmin para &#8220;debugar&#8221; suas funções PL/pgSQL<br /><br /><br /><br />&#8212;<br />Fabrízio Mello<br />fabriziomello [at] gmail.com<br /><div><br /></div><br /></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Fabrízio de Royes Mello</div>
<div class='content'>
Olá Fábio,<br /><br />Minha experiência com PostgreSQL nessa plataforma (Windows) é limitada, mas parece que nesse seu caso o problema é no seu &quot;pg_hba.conf&quot; (Host Based Authentication), ou seja, o arquivo de configuração das permissões para autenticação dos usuários na base de dados. Tente editá-lo e alterar os métodos de autenticação das regras (última coluna) para &quot;trust&quot;, depois faça um reload no processo do PostgreSQL e tente novamente.<br /><br />Também gostaria de comentar que esse não é o melhor local para vc tirar esse tipo de dúvida, então o convido para assinar nossa lista de discussão [1] da Comunidade Brasileira de PostgreSQL, onde temos muitas pessoas observando as dúvidas e ajudando. Faça um teste, se cadastre lá e envie um email com essa dúvida e vc verá como será.<br /><br />Abraços,<br /><br />[1] https://listas.postgresql.org.br/cgi-bin/mailman/listinfo/pgbr-geral<br /><br />&#8211;<br />Fabrízio de Royes Mello<br />Comunidade Brasileira de PostgreSQL</div>
</div>
<div class='comment'>
<div class='author'>Fabio</div>
<div class='content'>
Olá Fabrízio !! Estou com um problema no postgresql e estou na minha primeira instalação para começar a aprender&#8230;Na hora que estou criando o banco pela linha de comando ele pede senha e eu digito, mas apareçe uma mensagem tipo &quot;postgres não conseguiu conectar com o database erro fatal, falha na autenticação da senha&quot;, no entanto já troquei a senha do usuario postgres diversas vezes e o erro persiste. Estou usando a ferramenta no windows seven 64bits(já tentei no XP tambem)&#8230; Poderia me ajudar? Desde já muito obrigado e valeu pela atenção!!!  </div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vídeo Com Atividade Do Repositório GIT Do PostgreSQL Nos últimos Meses]]></title>
    <link href="http://fabriziomello.github.io/blog/2011/10/11/video-com-atividade-do-repositorio-git/"/>
    <updated>2011-10-11T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2011/10/11/video-com-atividade-do-repositorio-git</id>
    <content type="html"><![CDATA[<div class='post'>
<span class="Apple-style-span" style="font-family: arial; font-size: x-small;"></span><br /><div>Pessoal,</div><div><br /></div><div>Montei um pequeno vídeo [1] que mostra a atividade do repositório GIT do PostgreSQL nos últimos meses.</div><div><br /></div><div>Para gerar o vídeo usei o Gource [2].</div><div><br /></div><div><br /></div><div>[1]&nbsp;<a href="http://www.vimeo.com/30394945">http://www.vimeo.com/30394945</a></div><div>[2]&nbsp;<a href="http://code.google.com/p/gource/">http://code.google.com/p/gource/</a></div><div><br /></div><div><br /></div><span class="Apple-style-span" style="background-color: white; color: #333333; font-family: Verdana, Arial, sans-serif; font-size: 13px; line-height: 16px;">&#8212;<br />Fabrízio Mello<br />fabriziomello [at] gmail.com</span></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
preciso de sua ajuda, meu banco SQL caiu e não volta, depois d euma queda de energia.<br /><br />alan_andreani@windowslive.com MsN<br /><br />obrigado</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PGBR2011 - Chamada De Trabalhos]]></title>
    <link href="http://fabriziomello.github.io/blog/2011/08/31/pgbr2011-chamada-de-trabalhos/"/>
    <updated>2011-08-31T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2011/08/31/pgbr2011-chamada-de-trabalhos</id>
    <content type="html"><![CDATA[<div class='post'>
Pessoal,<br /><br />A <a href="http://pgbr.postgresql.org.br/2011/chamada.php">chamada de trabalhos do PGBR2011</a> está aberta.<br /><br />Vejam mais informações interessantes de como participar no excelente <a href="http://www.midstorm.org/~telles/2011/08/14/pgbr2011-chamada-de-trabalhos/">post do Fábio Telles</a>.<br /><br />&#8212;<br />Fabrízio Mello<br />fabriziomello [at] gmail.com</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PGDay/RS 2011 - Targettrust Irá Sortear 1 (Um) Curso De PostgreSQL (20h)]]></title>
    <link href="http://fabriziomello.github.io/blog/2011/07/28/pgdayrs-2011-targettrust-ira-sortear-1/"/>
    <updated>2011-07-28T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2011/07/28/pgdayrs-2011-targettrust-ira-sortear-1</id>
    <content type="html"><![CDATA[<div class='post'>
Durante o <a href="http://www.postgresql.org.br/eventos/pgday/rs">PGDay/RS 2011</a> a <a href="http://www.targettrust.com.br/">T@rgetTrust</a>, empresa especializada em treinamentos, irá sortear 1 (um) curso, a escolha do sorteado, da sua <a href="http://www.targettrust.com.br/web/formacao/administrador-e-desenvolvedor-postgresql.aspx">Formação PostgreSQL</a>:<br /><br /><ul><li><a href="http://www.targettrust.com.br/web/curso/postgresql-fundamentos.aspx?formacao=administrador-e-desenvolvedor-postgresql">PostgreSQL Fundamentos</a></li><li><a href="http://www.targettrust.com.br/web/curso/postgresql-procedural.aspx?formacao=administrador-e-desenvolvedor-postgresql">PostgreSQL Procedural</a></li><li><a href="http://www.targettrust.com.br/web/curso/postgresql-administracao.aspx?formacao=administrador-e-desenvolvedor-postgresql">PostgreSQL Administração</a></li><li><a href="http://www.targettrust.com.br/web/curso/postgresql-administracao-avancada.aspx?formacao=administrador-e-desenvolvedor-postgresql">PostgreSQL Administração Avançada</a></li></ul><div>Mais informações acesse o site do evento em:</div><div><br /></div><div><a href="http://www.postgresql.org.br/eventos/pgday/rs">http://www.postgresql.org.br/eventos/pgday/rs</a></div><div><br /></div><div><span class="Apple-style-span" style="color: #333333; font-family: Verdana, Arial, sans-serif; font-size: 13px; line-height: 16px;">Cordialmente,<br /><br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</span></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PGDay/RS 2011 Em Porto Alegre/RS]]></title>
    <link href="http://fabriziomello.github.io/blog/2011/06/15/pgdayrs-2011-em-porto-alegrers/"/>
    <updated>2011-06-15T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2011/06/15/pgdayrs-2011-em-porto-alegrers</id>
    <content type="html"><![CDATA[<div class='post'>
<b><br /></b><br /><b>O que é?</b><br /><br />Postgres ou <a href="http://www.postgresql.org/">PostgreSQL</a> é um projeto de Sistema Gerenciador de Banco de Dados open-source que foi iniciado em 1986, na Universidade de Berkeley, na Califórnia.<br /><br /><a href="http://www.postgresql.org.br/eventos/pgday">PGDay</a>, ou <a href="http://www.postgresql.org.br/eventos/pgday">Dia do Postgres</a>, é um evento não tão formal quanto ao <a href="http://pgbr.postgresql.org.br/">PGBR</a> (Conferência sobre PostgreSQL no Brasil) e de caráter regional, podendo ser realizado com poucas pessoas em qualquer/vários estados do País.<br /><br /><br /><br /><b>Quais são os objetivos?</b><br /><br />É uma chance para que acadêmicos, DBAs e desenvolvedores Brasileiros de PostgreSQL aprendam, troquem experiências, exponham casos de sucessos, desafios e fortifiquem sua rede de relacionamento profissional.<br /><br /><br /><b>Qual o público alvo?</b><br /><br />Dentre o público esperado estão:<br /><br /><ul><li>Administradores de Bancos de Dados;</li><li>Acadêmicos de Cursos Técnicos ou Universidades;</li><li>Desenvolvedores de Softwares;</li><li>Organizações governamentais;</li><li>Entusiastas de Software Livre;</li></ul><br /><br /><b>Data e Local</b><br /><br />O evento será dia <u>19 de Agosto de 2011</u>, no <u>Auditório do Bloco D da <b><a href="http://www.uniritter.edu.br/">Uniritter</a></b></u> localizado na Rua Orfanotrófio, 555, bairro Alto Teresópolis CEP: 90840-440 em Porto Alegre, RS.<br /><br /><br /><b>Inscrições, Palestras, Atividades e mais informações veja em:</b><br /><a href="http://www.postgresql.org.br/eventos/2011/pgday/rs">http://www.postgresql.org.br/eventos/2011/pgday/rs</a><br /><br /><br /><span class="Apple-style-span" style="color: #333333; font-family: Verdana, Arial, sans-serif; font-size: 13px; line-height: 16px;">Cordialmente,<br /><br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</span></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PGBR2011 - Conferência Nacional PostgreSQL (3-4 Novembro, São Paulo)]]></title>
    <link href="http://fabriziomello.github.io/blog/2011/04/08/pgbr2011-conferencia-nacional/"/>
    <updated>2011-04-08T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2011/04/08/pgbr2011-conferencia-nacional</id>
    <content type="html"><![CDATA[<div class='post'>
<span class="Apple-style-span" style="font-family: inherit;">O PGBR (antes conhecido como PGCon Brasil) é o maior evento sobre PostgreSQL das Américas: em 2009 e 2008, o evento trouxe mais de 300 profissionais de TI e, em 2007, mais de 200. Em 2011, serão 3 salas simultâneas com tutoriais, palestras e mesas de alto nível, contando com desenvolvedores nacionais e internacionais do PostgreSQL além de profissionais renomados no mercado brasileiro.</span><br /><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;">Venha conhecer de perto uma das comunidades de Software Livre que mais cresce no Brasil e no mundo que conta com o suporte de empresas de grande porte como CAIXA, Skype, BASF e Cisco. Conheça alguns dos maiores casos de sucesso brasileiros em órgãos públicos e privados, as novidades da versão 9.1 e o que está previsto para a versão 9.2 do PostgreSQL. Você terá a oportunidade também de conhecer técnicas avançadas de montitoramento, ajustes de performance, técnicas de replicação, migração, alta disponibilidade e muito mais.</span><br /><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;">Mais informações no sítio do evento:&nbsp;<a href="http://pgbr.postgresql.org.br/">http://pgbr.postgresql.org.br</a></span><br /><span class="Apple-style-span" style="font-family: inherit;"><br /></span><br /><span class="Apple-style-span" style="font-family: inherit;">Aproveite também e preencha a nossa pesquisa sobre uso do PostgreSQL no Brasil:</span><br /><span class="Apple-style-span" style="font-family: inherit;"><a href="https://spreadsheets.google.com/viewform?formkey=dFNOS0pjUFp3MFM0Y0xWT1RIWUZfRGc6MA">https://spreadsheets.google.com/viewform?formkey=dFNOS0pjUFp3MFM0Y0xWT1RIWUZfRGc6MA</a></span><br /><br /><br />Cordialmente,<br /><br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vaga DBA PostgreSQL Em Porto Alegre/RS]]></title>
    <link href="http://fabriziomello.github.io/blog/2010/10/12/vaga-dba-postgresql-em-porto-alegrers/"/>
    <updated>2010-10-12T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2010/10/12/vaga-dba-postgresql-em-porto-alegrers</id>
    <content type="html"><![CDATA[<div class='post'>
<span class="Apple-style-span" style="border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;">Pessoal,</span><br /><div><br /></div><div>Estamos com uma vaga para DBA PostgreSQL em Porto Alegre/RS, com as seguintes requisitos:</div><div><br /></div><div><div><b>ATRIBUIÇÕES:</b></div><div><ol><li>instalar/configurar Linux para posterior instalação do PostgreSQL</li><li>instalar/configurar o PostgreSQL na empresa (produção, desenvolvimento e testes) e nos clientes (produção e testes)</li><li>implantação e manutenção de políticas e rotinas de backup das bases de dados da empresa e dos clientes (scripts de backup padronizados)</li><li>implantação e manutenção de polĩticas e rotinas de segurança de dados</li><li>monitorar servidores PostgreSQL da empresa e dos clientes (coletar informações e estatísticas para geração de base de conhecimento dos clientes)</li><li>atender chamados dos clientes por eventuais problemas relacionados ao servidor de Banco de Dados PostgreSQL</li><li>apoio aos programadores na criação de SQLs complexos, bem como na construção de procedimentos armazenados e funções (stored procedures e functions)</li><li>apoio aos programadores na modelagem física de banco de dados</li><li>realizar migrações de versão do PostgreSQL</li><li>sugerir boas práticas de uso de SQL e Modelos de Dados a equipe de desenvolvimento</li><li>capacitação da equipe de desenvolvimento da empresa no uso de novos recursos oferecidos pelo PostgreSQL</li><li>otimização de performance (tunnig) do PostgreSQL e sistema operacional (Linux)</li></ol></div><div><br /></div><div><b>CONHECIMENTOS:</b></div><div><ol><li>PostgreSQL</li><li>Linux</li><li>Shell Script</li><li>Programação PHP (desejável)</li></ol></div></div><div><br /></div><div><br /></div><div>Interessados enviar Curriculum por e-mail para <b><u>curriculos [at] dbseller.com.br</u></b>&nbsp;que após análise inicial dos mesmos entraremos em contato para agendar entrevista.</div><div><br /></div><div>Cordialmente,</div><div><br /></div><div>Fabrízio de Royes Mello</div><div>fabriziomello [at] gmail.com</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Função "Array_diff" Em PostgreSQL]]></title>
    <link href="http://fabriziomello.github.io/blog/2010/09/17/funcao-arraydiff-em-postgresql/"/>
    <updated>2010-09-17T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2010/09/17/funcao-arraydiff-em-postgresql</id>
    <content type="html"><![CDATA[<div class='post'>
<div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Estava realizando algumas queries aqui no meu trabalho e tive a necessidade de uma função que retornasse um array contendo os elementos de um determinado array e não estão presentes em outro, igual ao array_diff do PHP [1].</div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Para resolver esse pequeno problema bastou um SELECT, vejam a implementação da função &#8220;array_diff&#8221; para PostgreSQL abaixo:</div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div></div><div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">CREATE OR REPLACE FUNCTION array_diff (anyarray, anyarray) RETURNS anyarray</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">AS $$</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">&nbsp;&nbsp;SELECT array(</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">&nbsp;&nbsp; &nbsp;SELECT $1[s.i]</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">&nbsp;&nbsp; &nbsp; &nbsp;FROM generate_series(array_lower($1,1), array_upper($1,1)) AS s(i)</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">&nbsp;&nbsp; &nbsp; WHERE NOT $1[s.i] = ANY($2)</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">&nbsp;&nbsp;);</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">$$</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">LANGUAGE sql;</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;"><br /></span></span></div></div><div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">postgres@bdteste=# SELECT array_diff(array[1, 2, 3], array[1, 4, 3]);</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">&nbsp;array_diff</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">&#8212;&#8212;&#8212;&#8212;</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">&nbsp;{2}</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">(1 row)</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;"><br /></span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">postgres@bdteste=# SELECT array_diff(array[1, 4, 3], array[1, 2, 3]);</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">&nbsp;array_diff</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">&#8212;&#8212;&#8212;&#8212;</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">&nbsp;{4}</span></span></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-family: 'courier new';"><span class="Apple-style-span" style="font-size: small;">(1 row)</span></span></div></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Espero ter ajudado de alguma forma.</div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">[1]&nbsp;<a href="http://br.php.net/manual/en/function.array-diff.php">http://br.php.net/manual/en/function.array-diff.php</a></div></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div></div><div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Cordialmente,</div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Fabrízio de Royes Mello</div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">fabriziomello [at] gmail.com</div></div></div></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Fabrízio de Royes Mello</div>
<div class='content'>
Sua refatoração é muito válida, porém sacrificamos a portabilidade da função&#8230; a versão que implementei funciona com as versões 8.1, 8.2, 8.3, 8.4, 9.0 e 9.1 (q ainda esta em beta).<br /><br />A utilização da função &quot;unnest&quot; limita vc a utilizar a função somente em versões iguais ou superiores a 8.4.<br /><br />De qualquer forma ficou muito enxuta a versão que vc implemento&#8230; gostei bastante.<br /><br /><br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Opa amigo, Eu estava procurando uma forma de fazer o diff e depois que vi como vc fez eu resolvi usar a funcao unnest e fiz desta forma, nao sei se ficou melhor ou pior&#8230;<br />Grande abraço e obrigado pela luz ;)<br /><br />CREATE OR REPLACE FUNCTION arrayDiff(anyarray, anyarray) RETURNS anyarray<br />AS $$<br />  SELECT array(<br />    SELECT x<br />      FROM unnest($1) AS x WHERE x not in (SELECT unnest($2))<br />  );<br />$$<br />LANGUAGE sql;</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CONSEGI 2010]]></title>
    <link href="http://fabriziomello.github.io/blog/2010/08/21/consegi-2010/"/>
    <updated>2010-08-21T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2010/08/21/consegi-2010</id>
    <content type="html"><![CDATA[<div class='post'>
Nos dias 18, 19 e 20 de agosto/2010 ocorreu o evento denominado <a href="http://www.consegi.gov.br/">CONSEGI2010</a>, onde tive oportunidade de participar como palestrante/instrutor em algumas atividades relacionadas ao <a href="http://www.postgresql.org.br/">PostgreSQL</a>.<br /><div><br /></div><div>Abaixo seguem os links para download dos arquivos da palestra de das oficinas que ministrei:</div><div><br /></div><div><a href="http://www.slideshare.net/fabriziomello/database-refactoring-postgresqlconsegi2010">Dia 19/08 - Palestra: Database Refactoring com PostgreSQL</a></div><div><a href="http://www.slideshare.net/fabriziomello/oficina-postgresql-basicoconsegi2010">Dia 20/08 - Oficina: PostgreSQL Básico</a></div><div><a href="http://www.slideshare.net/fabriziomello/oficina-postgresql-avanadoconsegi2010">Dia 20/02 - Oficina: PostgreSQL Avançado</a></div><div><br /></div><div>Obrigado a todos que estiveram presentes prestigiando o evento e as atividades que exerci.</div><div><br /></div><div>Cordialmente,</div><div><br /></div><div>Fabrízio de Royes Mello</div><div>fabriziomello [at] gmail.com</div><div><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL Na Memória RAM (In-Memory Database)]]></title>
    <link href="http://fabriziomello.github.io/blog/2010/06/27/postgresql-na-memoria-ram-in-memory/"/>
    <updated>2010-06-27T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2010/06/27/postgresql-na-memoria-ram-in-memory</id>
    <content type="html"><![CDATA[<div class='post'>
Recentemente (dia 24/06/2010) em seu blog, replicado no <a href="http://planet.postgresql.org/">planet-postgresql</a>, o <a href="http://rhaas.blogspot.com/">Sr. Robert Haas</a> postou o artigo denominado &#8221;<a href="http://rhaas.blogspot.com/2010/06/postgresql-as-in-memory-only-database_24.html">PostgreSQL as an In-Memory Only Database</a>&#8221;.<br /><br />Baseado em seu relato e no abordado na lista <a href="http://archives.postgresql.org/pgsql-performance/">pgsql-performance</a> montei este pequeno tutorial para exemplificar na prática o que foi discutido, ou seja, uma forma fácil e rápida de criar o seu próprio &#8220;PostgreSQL as an In-Memory Database&#8221;.<br /><br />Estou utilizando o Ubuntu 9.04 e PostgreSQL 8.3 para executar as atividades:<br /><br />1) Montando partição em memória com <a href="http://en.wikipedia.org/wiki/Tmpfs">tmpfs</a>:<br /><br /><span style="font-size: 85%;"><span style="font-family: 'courier new';">$ sudo -s</span><span style="font-family: 'courier new';"><br /><br />$ mkdir /mnt/in_memory</span><span style="font-family: 'courier new';"><br /><br />$ mount -t tmpfs -o size=2G,nr_inodes=8k,mode=0700 tmpfs /mnt/in_memory/</span><br /><br /></span><br />2) Criando cluster na partição criada:<span style="font-size: 85%;"><span style="font-family: 'courier new';"><br /><br />$ chown -R postgres. /mnt/in_memory/</span><span style="font-family: 'courier new';"><br /><br />$ su - postgres -c &#8220;/usr/lib/postgresql/8.3/bin/initdb -D /mnt/in_memory&#8221;</span><br /><br /><br /></span>3) Ajustando configurações do cluster (conforme recomendações do artigo citado):<span style="font-size: 85%;"><span style="font-family: 'courier new';"><br /><br />$ vim /mnt/in_memory/postgresql.conf</span><span style="font-family: 'courier new';"><br /><br />fsync=off</span><span style="font-family: 'courier new';"><br />synchronous_commit=off</span><span style="font-family: 'courier new';"><br />full_page_writes=off</span><span style="font-family: 'courier new';"><br />bgwriter_lru_maxpages=0</span></span><br /><br />Obs: caso vc já tenha algum processo do PostgreSQL executando na mesma máquina desse teste então vc deve verificar se não será necessário modificar também a variável &#8220;port&#8221; do postgresql.conf, pois o padrão é 5432.<br /><br /><br />4) Iniciando processo servidor:<span style="font-size: 85%;"><span style="font-family: 'courier new';"><br /><br />$ su - postgres -c &#8220;/usr/lib/postgresql/8.3/bin/pg_ctl -D /mnt/in_memory -l /mnt/in_memory/postgres.log start&#8221;</span></span><br /><br /><br />5) Verificando se o cluster está funcionando:<span style="font-size: 85%;"><span style="font-family: 'courier new';"><br /><br />$ ps ax | grep post</span><span style="font-family: 'courier new';"><br />19614 pts/3    S      0:00 /usr/lib/postgresql/8.3/bin/postgres -D /mnt/in_memory</span><span style="font-family: 'courier new';"><br />19653 ?            Ss     0:00 postgres: writer process</span><span style="font-family: 'courier new';"><br />19654 ?     Ss     0:00 postgres: wal writer process<br /></span><span style="font-family: 'courier new';">19655 ?            Ss     0:00 postgres: autovacuum launcher process</span><span style="font-family: 'courier new';"><br />19656 ?            Ss     0:00 postgres: stats collector process<br /><br /></span><span style="font-family: 'courier new';">$ /usr/lib/postgresql/8.3/bin/psql -U postgres -p 5437 -l</span><span style="font-family: 'courier new';"><br />Lista dos bancos de dados</span><span style="font-family: 'courier new';"><br />Nome    |   Dono   | Codificação </span><span style="font-family: 'courier new';"><br />&#8212;&#8212;&#8212;&#8211;+&#8212;&#8212;&#8212;-+&#8212;&#8212;&#8212;&#8212;-</span><span style="font-family: 'courier new';"><br />postgres  | postgres | UTF8</span><span style="font-family: 'courier new';"><br />template0 | postgres | UTF8</span><span style="font-family: 'courier new';"><br />template1 | postgres | UTF8</span><span style="font-family: 'courier new';"><br />(3 registros)</span></span><br /><br />Acredito que neste ponto você já esteja com o seu PostgreSQL na memória pronto e funcional.<br /><br />Lembre-se que o mesmo está &#8220;literalmente&#8221; na memória RAM, portanto ao desligar o micro o seu cluster inteiro será perdido, por isso o seu uso fica limitado como um Cache ao invés do uso do memcached ou alternativas NoSQL, porém com todos recursos disponíveis no PostgreSQL.<br /><br /><br />Por favor reportem problemas com esse mini-tutorial e/ou críticas e sugestões.<br /><br /><br />Cordialmente,<br /><br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Fabrízio de Royes Mello</div>
<div class='content'>
Tem sim, mas se a sua necessidade é de manter os dados então creio que essa técnica não atenda a sua necessidade. Até mesmo porque um desligamento indevido do equipamento irá ocasionar a perda da partição.<br /><br />Cordialmente,<br /><br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</div>
</div>
<div class='comment'>
<div class='author'>Moisés P. Sena</div>
<div class='content'>
Achei interessante a idéia!<br />Não tem um recurso para quando der o halt na máquina, antes de desligar tudo copiar os arquivos para o HD?</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL 8.2.x Em Ubuntu > 8.04]]></title>
    <link href="http://fabriziomello.github.io/blog/2010/04/13/postgresql-82x-em-ubuntu-804/"/>
    <updated>2010-04-13T00:00:00-03:00</updated>
    <id>http://fabriziomello.github.io/blog/2010/04/13/postgresql-82x-em-ubuntu-804</id>
    <content type="html"><![CDATA[<div class='post'>
Como é de conhecimento de todos as versões do Ubuntu superiores a 8.04 (hardy) não possuem em seus repositórios padrões o PostgreSQL 8.2.x, então o caminho natural para que seja feita a instalação é download dos fontes, compilar e instalar&#8230; para quem tem bastante intimidade com Linux + PostgreSQL essa é uma atividade corriqueira e que normalmente é realizada em ambientes de produção.<br /><br />Porém tenho recebido de clientes e amigos questionamentos de como instalar, de maneira mais simples, o PostgreSQL 8.2.x em Ubuntu &gt; 8.04, pois bem então ai vai a dica.<br /><br />No console, como usuário root, execute:<br /><br /><span style="font-size: 85%;"><span style="font-family: 'courier new';">$ apt-get update</span><span style="font-family: 'courier new';"><br /><br />$ echo &#8220;deb http://archive.ubuntu.com/ubuntu/ hardy main universe&#8221; &gt; /etc/apt/sources.list.d/ubuntu-8.04.list</span><span style="font-family: 'courier new';"><br /><br />$ apt-get update</span><span style="font-family: 'courier new';"><br /><br />$ apt-get install postgresql-8.2</span><span style="font-family: 'courier new';"><br /><br />$ rm -f /etc/apt/sources.list.d/ubuntu-8.04.list</span><span style="font-family: 'courier new';"><br /><br />$ apt-get update</span><br /></span><br /><br />Com isso basta executar um <span style="font-weight: bold;">pg_lsclusters</span> ou um <span style="font-weight: bold;">dpkg &#8211;list &#8216;postgresql*&#8217; </span>no console que poderão verificar que a versão 8.2.7 estará instalada.<br /><br />Um pequeno contratempo em relação a essa abordagem é que teremos a versão 8.2.7 instalada e atualmente já temos disponível a 8.2.16, mas é possível sim atualizar a versão através da compilação pelos fontes mantendo toda a infra-estrutura do Ubuntu com o postgresql-common, mas isso fica para um próximo post.<br /><br />Por favor reportem possíveis problemas com esse mini-tutorial.<br /><br /><br />Cordialmente,<br /><br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Alvaro Borges</div>
<div class='content'>
Deu muito certo aqui a instalação OBRIGADO!</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL 8.5 vs 9.0]]></title>
    <link href="http://fabriziomello.github.io/blog/2010/01/22/postgresql-85-vs-90/"/>
    <updated>2010-01-22T00:00:00-02:00</updated>
    <id>http://fabriziomello.github.io/blog/2010/01/22/postgresql-85-vs-90</id>
    <content type="html"><![CDATA[<div class='post'>
Não é oficial ainda mas parece que não teremos mais uma versão 8.5 do PostgreSQL&#8230; a nova versão será 9.0 conforme discussão na lista de desenvolvimento do mesmo [1].<br /><br />O motivo dessa mudança é o grande número de novas funcionalidades que irá incorporar a nova versão do PostgreSQL&#8230; isso é muito interessante pois a evolução do &#8220;elefantinho&#8221; está cada vez mais acelerada&#8230;<br /><br />Vida longa ao PostgreSQL!!!<br /><br /><br />[1] <a href="http://archives.postgresql.org/pgsql-hackers/2010-01/msg02056.php">http://archives.postgresql.org/pgsql-hackers/2010-01/msg02056.php</a><br /><br /><br />Cordialmente,<br /><br />Fabrízio de Royes Mello<br />fabriziomello [at] gmail.com</div>
]]></content>
  </entry>
  
</feed>
